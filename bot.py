import discord
from discord.ext import commands
import gspread
import google.generativeai as genai
import json
from datetime import datetime
import re
import os
from dotenv import load_dotenv

# --- T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env ---
load_dotenv()

# --- L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ---
DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
GOOGLE_SERVICE_ACCOUNT = os.getenv("GOOGLE_SERVICE_ACCOUNT")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME")
GOOGLE_WORKSHEET_NAME = os.getenv("GOOGLE_WORKSHEET_NAME")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


# --- Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c t·∫£i ƒë·∫ßy ƒë·ªß ch∆∞a ---
if not all([DISCORD_BOT_TOKEN, GOOGLE_SERVICE_ACCOUNT, 
            GOOGLE_SHEET_NAME, GOOGLE_WORKSHEET_NAME, GEMINI_API_KEY]):
    print("!!! C·∫¢NH B√ÅO: M·ªòT HO·∫∂C NHI·ªÄU BI·∫æN M√îI TR∆Ø·ªúNG CH∆ØA ƒê∆Ø·ª¢C C·∫§U H√åNH ƒê·∫¶Y ƒê·ª¶ !!!")
    print("Vui l√≤ng ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã: DISCORD_BOT_TOKEN, GOOGLE_SERVICE_ACCOUNT,")
    print("GOOGLE_SHEET_NAME, GOOGLE_WORKSHEET_NAME, GEMINI_API_KEY")
    # Tho√°t ch∆∞∆°ng tr√¨nh n·∫øu thi·∫øu c·∫•u h√¨nh quan tr·ªçng
    exit(1)

# --- C·∫•u h√¨nh Discord Bot ---
# intents gi√∫p bot bi·∫øt nh·ªØng lo·∫°i s·ª± ki·ªán n√†o n√≥ n√™n l·∫Øng nghe
intents = discord.Intents.default()
intents.message_content = True # R·∫•t quan tr·ªçng ƒë·ªÉ bot c√≥ th·ªÉ ƒë·ªçc n·ªôi dung tin nh·∫Øn
bot = commands.Bot(command_prefix='!', intents=intents)


# --- C·∫•u h√¨nh Google Sheet ---
gc = None
worksheet = None
try:
    service_account_info = json.loads(GOOGLE_SERVICE_ACCOUNT) 
    gc = gspread.service_account_from_dict(service_account_info)
    spreadsheet = gc.open(GOOGLE_SHEET_NAME)
    worksheet = spreadsheet.worksheet(GOOGLE_WORKSHEET_NAME)
    print("‚úÖ K·∫øt n·ªëi Google Sheet th√†nh c√¥ng!")
except json.JSONDecodeError as e: # B·∫Øt l·ªói JSONDecodeError c·ª• th·ªÉ h∆°n
    print(f"‚ùå L·ªói bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_SERVICE_ACCOUNT: {e}")
    print("Vui l√≤ng ƒë·∫£m b·∫£o chu·ªói JSON trong .env l√† h·ª£p l·ªá v√† ƒë√£ ƒë∆∞·ª£c tho√°t ƒë√∫ng c√°ch.")
except Exception as e:
    print(f"‚ùå L·ªói k·∫øt n·ªëi Google Sheet: {e}")
    print("Vui l√≤ng ki·ªÉm tra GOOGLE_SHEET_NAME, GOOGLE_WORKSHEET_NAME ho·∫∑c quy·ªÅn truy c·∫≠p c·ªßa Service Account.")

# --- C·∫•u h√¨nh Gemini AI ---
gemini_model = None
try:
    genai.configure(api_key=GEMINI_API_KEY)
    
    # C·∫•u h√¨nh model v√† c√°c tham s·ªë
    MODEL_NAME = "gemini-1.5-flash"  # Ho·∫∑c model b·∫°n mu·ªën d√πng
    generation_config = {
        "max_output_tokens": 1024,
        "temperature": 0.6,
        "top_p": 1.0
    }
    safety_settings = [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    ]
    
    # T·∫°o model v·ªõi c·∫•u h√¨nh
    gemini_model = genai.GenerativeModel(
        model_name=MODEL_NAME,
        generation_config=generation_config,
        safety_settings=safety_settings
    )
    print("‚úÖ K·∫øt n·ªëi Gemini AI th√†nh c√¥ng!")
except Exception as e:
    print(f"‚ùå L·ªói k·∫øt n·ªëi Gemini AI: {e}")
    print("Vui l√≤ng ki·ªÉm tra GEMINI_API_KEY c·ªßa b·∫°n v√† ƒë·∫£m b·∫£o b·∫°n ƒë√£ c√†i ƒë·∫∑t phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa th∆∞ vi·ªán `google-generativeai`.")

# --- S·ª± ki·ªán khi bot s·∫µn s√†ng ---
@bot.event
async def on_ready():
    print(f'-------------------------------------')
    print(f'{bot.user.name} ƒë√£ s·∫µn s√†ng v√† ƒëang ch·∫°y!')
    print(f'Discord ID: {bot.user.id}')
    print(f'-------------------------------------')

# --- X·ª≠ l√Ω m·ªçi tin nh·∫Øn ƒë·∫øn ---
@bot.event
async def on_message(message):
    # B·ªè qua tin nh·∫Øn c·ªßa ch√≠nh bot
    if message.author == bot.user:
        return

    content = message.content.strip()

    bank_statement = ""
    user_description = "Kh√¥ng c√≥ m√¥ t·∫£ ng∆∞·ªùi d√πng"
    person_paying = "" 

    # C·∫£i thi·ªán Regex ƒë·ªÉ b·∫Øt H. ho·∫∑c L. m·ªôt c√°ch linh ho·∫°t h∆°n
    # T√¨m H. ho·∫∑c L. theo sau b·ªüi d·∫•u ch·∫•m v√† kho·∫£ng tr·∫Øng, c√≥ th·ªÉ ·ªü ƒë·∫ßu d√≤ng m·ªõi ho·∫∑c sau v√†i kho·∫£ng tr·∫Øng.
    # re.MULTILINE ƒë·ªÉ ^ kh·ªõp v·ªõi ƒë·∫ßu m·ªói d√≤ng, re.IGNORECASE ƒë·ªÉ kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng.
    # re.DOTALL ƒë·ªÉ d·∫•u ch·∫•m kh·ªõp v·ªõi c·∫£ k√Ω t·ª± xu·ªëng d√≤ng.
    
    # C√∫ ph√°p m·∫´u: [th√¥ng b√°o] \n H. [m√¥ t·∫£] HO·∫∂C [th√¥ng b√°o] H. [m√¥ t·∫£]
    # T√¨m ki·∫øm m·ªôt trong hai pattern:
    # 1. B·∫•t k·ª≥ k√Ω t·ª± n√†o (non-greedy) theo sau b·ªüi m·ªôt ho·∫∑c nhi·ªÅu kho·∫£ng tr·∫Øng/xu·ªëng d√≤ng, r·ªìi H. ho·∫∑c L.
    # 2. Ho·∫∑c H. ho·∫∑c L. xu·∫•t hi·ªán ngay sau th√¥ng b√°o (kh√¥ng c√≥ xu·ªëng d√≤ng/nhi·ªÅu kho·∫£ng tr·∫Øng)
    
    # Regex chung ƒë·ªÉ t√¨m ki·∫øm pattern H./L.
    # Regex n√†y s·∫Ω t√¨m ki·∫øm "H." ho·∫∑c "L." c√≥ th·ªÉ n·∫±m ·ªü ƒë·∫ßu d√≤ng m·ªõi (sau \n)
    # ho·∫∑c sau √≠t nh·∫•t m·ªôt kho·∫£ng tr·∫Øng (ho·∫∑c k√Ω t·ª± b·∫•t k·ª≥) t·ª´ ph·∫ßn tr∆∞·ªõc ƒë√≥.
    
    # S·∫Ω chia tin nh·∫Øn th√†nh 2 ph·∫ßn n·∫øu t√¨m th·∫•y H. ho·∫∑c L.
    # Ph·∫ßn 1: bank_statement (tr∆∞·ªõc H./L.)
    # Ph·∫ßn 2: H./L. + user_description
    
    # Thay th·∫ø regex c≈© ƒë·ªÉ x·ª≠ l√Ω linh ho·∫°t h∆°n
    # T√¨m ki·∫øm m·ªôt pattern H. ho·∫∑c L. (c√≥ d·∫•u ch·∫•m, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    # ƒë∆∞·ª£c bao quanh b·ªüi c√°c k√Ω t·ª± kho·∫£ng tr·∫Øng/xu·ªëng d√≤ng t√πy √Ω
    marker_match = re.search(r'(\s*[HL]\.\s*)(.*)', content, re.IGNORECASE | re.DOTALL)

    if marker_match:
        # N·∫øu t√¨m th·∫•y H. ho·∫∑c L.
        # T√°ch ph·∫ßn th√¥ng b√°o ng√¢n h√†ng (tr∆∞·ªõc marker)
        bank_statement_raw = content[:marker_match.start(1)].strip()
        # Ph·∫ßn m√¥ t·∫£ c·ªßa ng∆∞·ªùi d√πng
        user_description_raw = marker_match.group(2).strip()
        
        # L·∫•y k√Ω t·ª± marker ƒë·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi chi tr·∫£
        marker_char = marker_match.group(1).strip().upper()
        if marker_char == 'H.':
            person_paying = "Ch·ªìng"
        elif marker_char == 'L.':
            person_paying = "V·ª£"
        else:
            person_paying = "Ch∆∞a x√°c ƒë·ªãnh" # Tr∆∞·ªùng h·ª£p kh√¥ng mong mu·ªën

        bank_statement = bank_statement_raw
        user_description = user_description_raw
        if not user_description:
            user_description = "Kh√¥ng c√≥ m√¥ t·∫£ ng∆∞·ªùi d√πng"
            
    else:
        # N·∫øu kh√¥ng t√¨m th·∫•y H. ho·∫∑c L.
        bank_statement = content
        user_description = "Kh√¥ng c√≥ m√¥ t·∫£ ng∆∞·ªùi d√πng"
        person_paying = "Ch∆∞a x√°c ƒë·ªãnh" # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ H/L

    # B·ªè qua c√°c tin nh·∫Øn qu√° ng·∫Øn ho·∫∑c kh√¥ng gi·ªëng th√¥ng b√°o ng√¢n h√†ng
    if len(bank_statement) < 15 and not bank_statement.startswith(bot.command_prefix): # Gi·∫£m ng∆∞·ª°ng t·ªëi thi·ªÉu
        await bot.process_commands(message)
        return
    
    # Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ v·∫ª l√† th√¥ng b√°o bi·∫øn ƒë·ªông s·ªë d∆∞ (c√≥ "S·ªë ti·ªÅn:" ho·∫∑c "S·ªë d∆∞:")
    """
    if "s·ªë ti·ªÅn:" not in bank_statement.lower() and "s·ªë d∆∞:" not in bank_statement.lower():
        await bot.process_commands(message)
        return
    """
    if worksheet is None or gemini_model is None:
        await message.channel.send("Bot ch∆∞a s·∫µn s√†ng do l·ªói c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra l·∫°i log tr√™n console.")
        return

    await message.channel.send("ü§ñ ƒêang x·ª≠ l√Ω th√¥ng b√°o bi·∫øn ƒë·ªông s·ªë d∆∞ c·ªßa b·∫°n, vui l√≤ng ch·ªù trong gi√¢y l√°t...")

    try:
        # --- M√î T·∫¢ TIN NH·∫ÆN CHO AI (FEW-SHOT EXAMPLES) ---
        examples_prompt = """
        V√≠ d·ª•:
        Input: "07:29 16/06/2025 Tai khoan thanh toan: 4616789699 So tien: - 50,000 VND So du cuoi: 6,673,125 VND Ma giao dich: 0992dLK4-80wKAyuuH Noi dung giao dich: Omni Channel-TKThe :0363067975, tai ICBVVNVX. NGUYEN THAI HUNG CHUYEN TIEN -020097048806160729032025rC6v011964-1/2-PMT-002"
        Output:
        ```json
        {
          "so_tien_giao_dich": -50000,
          "loai_giao_dich": "Chi",
          "ngay_gio_giao_dich": "16/06/2025"
        }
        ```

        Input: "Agribank: 16h08p 13/06 TK 2300205418014: +20,000,000VND NGUYEN THAI HUNG CHUYEN TIEN. SD: 39,960,474VND."
        Output:
        ```json
        {
          "so_tien_giao_dich": 20000000,
          "loai_giao_dich": "Thu",
          "ngay_gio_giao_dich": "13/06/2025"
        }
        ```

        Input: "Vietcombank thong bao: 10:30 ngay 14/06/2025 -123,456 VND TK: XXXXX. Noi dung: Rut tien ATM"
        Output:
        ```json
        {
          "so_tien_giao_dich": -123456,
          "loai_giao_dich": "Chi",
          "ngay_gio_giao_dich": "14/06/2025"
        }
        ```
        """
        # --- H·∫æT PH·∫¶N M√î T·∫¢ TIN NH·∫ÆN CHO AI ---

        # Prompt ch√≠nh cho Gemini AI
        prompt = f"""
        Tr√≠ch xu·∫•t 'S·ªë ti·ªÅn giao d·ªãch', 'Lo·∫°i giao d·ªãch' (Thu/Chi), v√† 'Ng√†y/Gi·ªù' t·ª´ th√¥ng b√°o bi·∫øn ƒë·ªông s·ªë d∆∞ sau.
        N·∫øu 'S·ªë ti·ªÅn' c√≥ d·∫•u '-', ƒë√≥ l√† 'Chi'. N·∫øu kh√¥ng c√≥ d·∫•u '-', ho·∫∑c c√≥ d·∫•u '+', ƒë√≥ l√† 'Thu'.
        ƒê·ªãnh d·∫°ng 'Ng√†y/Gi·ªù' th√†nh DD/MM/YYYY.
        N·∫øu kh√¥ng t√¨m th·∫•y 'Ng√†y/Gi·ªù' c·ª• th·ªÉ trong th√¥ng b√°o, s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i c·ªßa h·ªá th·ªëng v·ªõi ƒë·ªãnh d·∫°ng DD/MM/YYYY.
        Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON.

        {examples_prompt}

        Th√¥ng b√°o c·∫ßn ph√¢n t√≠ch:
        {bank_statement}
        """
        
        response = gemini_model.generate_content(prompt)
        
        # Ki·ªÉm tra n·∫øu response kh√¥ng c√≥ text ho·∫∑c tr·ªëng
        if not response.text:
            await message.channel.send("‚ùå AI kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª´ th√¥ng b√°o c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒë·ªãnh d·∫°ng r√µ r√†ng h∆°n ho·∫∑c th√¥ng b√°o kh√°c.")
            return

        # Gemini ƒë√¥i khi tr·∫£ v·ªÅ JSON trong c·∫∑p d·∫•u ```json ... ```
        json_str_match = re.search(r"```json\s*(.*?)\s*```", response.text, re.DOTALL)
        if json_str_match:
            json_str = json_str_match.group(1)
        else:
            json_str = response.text.strip() # N·∫øu kh√¥ng c√≥ ```json``` th√¨ l·∫•y to√†n b·ªô text

        data = json.loads(json_str)

        # L·∫•y d·ªØ li·ªáu v√† chu·∫©n h√≥a
        so_tien_raw = data.get("so_tien_giao_dich")
        if so_tien_raw is None:
             raise ValueError("Kh√¥ng t√¨m th·∫•y 'so_tien_giao_dich' trong ph·∫£n h·ªìi AI.")

        # X·ª≠ l√Ω s·ªë ti·ªÅn: lo·∫°i b·ªè d·∫•u ph·∫©y/ch·∫•m n·∫øu c√≥, chuy·ªÉn v·ªÅ s·ªë nguy√™n, l·∫•y gi√° tr·ªã tuy·ªát ƒë·ªëi
        so_tien = abs(int(str(so_tien_raw).replace(",", "").replace(".", "")))
        
        loai_gd = data.get("loai_giao_dich")
        if loai_gd is None:
            raise ValueError("Kh√¥ng t√¨m th·∫•y 'loai_giao_dich' trong ph·∫£n h·ªìi AI.")
        
        noi_dung = user_description
        
        ngay_gio_str = data.get("ngay_gio_giao_dich")
        
        # ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ng√†y th√°ng chu·∫©n cho Google Sheet (DD/MM/YYYY)
        try:
            # Th·ª≠ parse theo ƒë·ªãnh d·∫°ng DD/MM/YYYY
            if ngay_gio_str and re.match(r"\d{2}/\d{2}/\d{4}", ngay_gio_str):
                 ngay = datetime.strptime(ngay_gio_str, "%d/%m/%Y").strftime("%d/%m/%Y")
            # Th·ª≠ parse theo ƒë·ªãnh d·∫°ng YYYY-MM-DD (ph√≤ng tr∆∞·ªùng h·ª£p AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng c≈©)
            elif ngay_gio_str and re.match(r"\d{4}-\d{2}-\d{2}", ngay_gio_str):
                 ngay = datetime.strptime(ngay_gio_str, "%Y-%m-%d").strftime("%d/%m/%Y")
            else:
                 ngay = datetime.now().strftime("%d/%m/%Y") # M·∫∑c ƒë·ªãnh l√† ng√†y hi·ªán t·∫°i
        except (ValueError, TypeError):
            ngay = datetime.now().strftime("%d/%m/%Y") # M·∫∑c ƒë·ªãnh l√† ng√†y hi·ªán t·∫°i n·∫øu c√≥ l·ªói

        # Th√™m v√†o Google Sheet - B·ªî SUNG C·ªòT person_paying
        row_data = [ngay, loai_gd, so_tien, noi_dung, person_paying]
        worksheet.append_row(row_data)
        
        await message.channel.send(
            f"‚úÖ **ƒê√£ ghi nh·∫≠n giao d·ªãch v√†o s·ªï thu chi:**\n"
            f"‚Ä¢ **Ng√†y:** `{ngay}`\n"
            f"‚Ä¢ **Lo·∫°i:** `{loai_gd}`\n"
            f"‚Ä¢ **S·ªë ti·ªÅn:** `{so_tien:,.0f} VND`\n" # ƒê·ªãnh d·∫°ng s·ªë c√≥ d·∫•u ph·∫©y
            f"‚Ä¢ **N·ªôi dung:** `{noi_dung}`\n"
            f"‚Ä¢ **Ng∆∞·ªùi thu/chi:** `{person_paying}`"
        )

    except json.JSONDecodeError:
        await message.channel.send("‚ùå L·ªói: AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng ph·∫£i JSON. C√≥ v·∫ª AI kh√¥ng hi·ªÉu r√µ y√™u c·∫ßu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng b√°o c·ªßa b·∫°n v√† th·ª≠ l·∫°i.")
    except ValueError as ve:
        await message.channel.send(f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {ve}. C√≥ th·ªÉ AI kh√¥ng tr√≠ch xu·∫•t ƒë·ªß th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn/ng√†y th√°ng kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng b√°o c·ªßa b·∫°n.")
    except Exception as e:
        print(f"L·ªói t·ªïng qu√°t khi x·ª≠ l√Ω tin nh·∫Øn: {e}")
        await message.channel.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau. Chi ti·∫øt l·ªói: `{e}`")

    # Quan tr·ªçng: G·ªçi process_commands ƒë·ªÉ bot v·∫´n x·ª≠ l√Ω c√°c l·ªánh (commands) kh√°c n·∫øu b·∫°n c√≥
    await bot.process_commands(message)


# --- Ch·∫°y bot ---
if __name__ == '__main__':
    # Bot s·∫Ω ch·ªâ ch·∫°y n·∫øu t·∫•t c·∫£ c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c t·∫£i
    if all([DISCORD_BOT_TOKEN, GOOGLE_SERVICE_ACCOUNT, 
            GOOGLE_SHEET_NAME, GOOGLE_WORKSHEET_NAME, GEMINI_API_KEY]):
        bot.run(DISCORD_BOT_TOKEN)
    else:
        print("\nBot kh√¥ng th·ªÉ kh·ªüi ƒë·ªông do thi·∫øu c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra th√¥ng b√°o c·∫£nh b√°o ·ªü tr√™n.")